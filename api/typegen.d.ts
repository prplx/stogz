/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as PrismaClient from "./../node_modules/.prisma/client/index"
import { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ShareWhereUniqueInput: { // input type
    id?: number | null; // Int
    symbol?: string | null; // String
  }
  WatchlistWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AlphaVantageSymbol: { // root type
    currency?: string | null; // String
    marketClose?: string | null; // String
    marketOpen?: string | null; // String
    name?: string | null; // String
    region?: string | null; // String
    symbol?: string | null; // String
    timezone?: string | null; // String
    type?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Share: PrismaClient.Share;
  User: PrismaClient.User;
  Watchlist: PrismaClient.Watchlist;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AlphaVantageSymbol: { // field return type
    currency: string | null; // String
    marketClose: string | null; // String
    marketOpen: string | null; // String
    name: string | null; // String
    region: string | null; // String
    symbol: string | null; // String
    timezone: string | null; // String
    type: string | null; // String
  }
  Mutation: { // field return type
    addShareToWatchlist: NexusGenRootTypes['Share']; // Share!
    createWatchlist: NexusGenRootTypes['Watchlist']; // Watchlist!
  }
  Query: { // field return type
    symbolSearch: Array<NexusGenRootTypes['AlphaVantageSymbol'] | null> | null; // [AlphaVantageSymbol]
    watchlist: NexusGenRootTypes['Watchlist'] | null; // Watchlist
    watchlists: Array<NexusGenRootTypes['Watchlist'] | null> | null; // [Watchlist]
  }
  Share: { // field return type
    currency: string; // String!
    id: number; // Int!
    marketClose: string; // String!
    marketOpen: string; // String!
    name: string; // String!
    region: string; // String!
    symbol: string; // String!
    type: string; // String!
  }
  User: { // field return type
    email: string | null; // String
    familyName: string | null; // String
    givenName: string | null; // String
    id: number; // Int!
    picture: string | null; // String
    sub: string; // String!
    watchlists: NexusGenRootTypes['Watchlist'][]; // [Watchlist!]!
  }
  Watchlist: { // field return type
    id: number; // Int!
    name: string; // String!
    shares: NexusGenRootTypes['Share'][]; // [Share!]!
    user: NexusGenRootTypes['User']; // User!
  }
}

export interface NexusGenFieldTypeNames {
  AlphaVantageSymbol: { // field return type name
    currency: 'String'
    marketClose: 'String'
    marketOpen: 'String'
    name: 'String'
    region: 'String'
    symbol: 'String'
    timezone: 'String'
    type: 'String'
  }
  Mutation: { // field return type name
    addShareToWatchlist: 'Share'
    createWatchlist: 'Watchlist'
  }
  Query: { // field return type name
    symbolSearch: 'AlphaVantageSymbol'
    watchlist: 'Watchlist'
    watchlists: 'Watchlist'
  }
  Share: { // field return type name
    currency: 'String'
    id: 'Int'
    marketClose: 'String'
    marketOpen: 'String'
    name: 'String'
    region: 'String'
    symbol: 'String'
    type: 'String'
  }
  User: { // field return type name
    email: 'String'
    familyName: 'String'
    givenName: 'String'
    id: 'Int'
    picture: 'String'
    sub: 'String'
    watchlists: 'Watchlist'
  }
  Watchlist: { // field return type name
    id: 'Int'
    name: 'String'
    shares: 'Share'
    user: 'User'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addShareToWatchlist: { // args
      currency: string; // String!
      marketClose: string; // String!
      marketOpen: string; // String!
      name: string; // String!
      region: string; // String!
      symbol: string; // String!
      timezone: string; // String!
      type: string; // String!
      watchlistId: string; // ID!
    }
    createWatchlist: { // args
      name: string; // String!
    }
  }
  Query: {
    symbolSearch: { // args
      symbol: string; // String!
    }
    watchlist: { // args
      id: string; // ID!
    }
  }
  User: {
    watchlists: { // args
      after?: NexusGenInputs['WatchlistWhereUniqueInput'] | null; // WatchlistWhereUniqueInput
      before?: NexusGenInputs['WatchlistWhereUniqueInput'] | null; // WatchlistWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Watchlist: {
    shares: { // args
      after?: NexusGenInputs['ShareWhereUniqueInput'] | null; // ShareWhereUniqueInput
      before?: NexusGenInputs['ShareWhereUniqueInput'] | null; // ShareWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}