/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as IEX from "./src/types/iexCloud"
import * as PrismaClient from "./node_modules/.prisma/client/index"
import { Context } from "./src/context"
import { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PortfolioSharesShareIdPortfolioIdCompoundUniqueInput: { // input type
    portfolioId: number; // Int!
    shareId: number; // Int!
  }
  PortfolioSharesWhereUniqueInput: { // input type
    shareId_portfolioId?: NexusGenInputs['PortfolioSharesShareIdPortfolioIdCompoundUniqueInput'] | null; // PortfolioSharesShareIdPortfolioIdCompoundUniqueInput
  }
  WatchlistWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  Json: any
}

export interface NexusGenObjects {
  IEXSearchResult: { // root type
    exchange?: string | null; // String
    region?: string | null; // String
    securityName?: string | null; // String
    symbol?: string | null; // String
  }
  Mutation: {};
  Portfolio: PrismaClient.Portfolio;
  PortfolioShares: PrismaClient.PortfolioShares;
  Query: {};
  Share: PrismaClient.Share;
  ShareQuote: IEX.ShareQuote;
  User: PrismaClient.User;
  Watchlist: PrismaClient.Watchlist;
  WatchlistShares: PrismaClient.WatchlistShares;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  IEXSearchResult: { // field return type
    exchange: string | null; // String
    region: string | null; // String
    securityName: string | null; // String
    symbol: string | null; // String
  }
  Mutation: { // field return type
    addShareToWatchlist: NexusGenRootTypes['WatchlistShares']; // WatchlistShares!
    createPortfolio: NexusGenRootTypes['Portfolio']; // Portfolio!
    createWatchlist: NexusGenRootTypes['Watchlist']; // Watchlist!
    removeShareFromWatchList: NexusGenRootTypes['WatchlistShares']; // WatchlistShares!
    updateWatchlistHiddenColumns: NexusGenRootTypes['Watchlist']; // Watchlist!
  }
  Portfolio: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    name: string; // String!
    shares: NexusGenRootTypes['PortfolioShares'][]; // [PortfolioShares!]!
    user: NexusGenRootTypes['User']; // User!
  }
  PortfolioShares: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    portfolio: NexusGenRootTypes['Portfolio'] | null; // Portfolio
    portfolios: Array<NexusGenRootTypes['Portfolio'] | null> | null; // [Portfolio]
    symbolSearch: Array<NexusGenRootTypes['IEXSearchResult'] | null> | null; // [IEXSearchResult]
    watchlist: NexusGenRootTypes['Watchlist'] | null; // Watchlist
    watchlists: Array<NexusGenRootTypes['Watchlist'] | null> | null; // [Watchlist]
  }
  Share: { // field return type
    companyName: string; // String!
    country: string | null; // String
    description: string; // String!
    exchange: string; // String!
    id: number; // Int!
    industry: string; // String!
    issueType: string; // String!
    sector: string; // String!
    symbol: string; // String!
  }
  ShareQuote: { // field return type
    addedAt: NexusGenScalars['DateTime'] | null; // DateTime
    addedPrice: number | null; // Float
    change: number | null; // Float
    changePercent: number | null; // Float
    changePercentSinceAdded: number | null; // Float
    changeSinceAdded: number | null; // Float
    companyName: string | null; // String
    high: number | null; // Float
    latestPrice: number | null; // Float
    latestUpdate: number | null; // Float
    latestVolume: number | null; // Float
    low: number | null; // Float
    open: number | null; // Float
    shareId: number | null; // Int
    symbol: string | null; // String
  }
  User: { // field return type
    email: string | null; // String
    familyName: string | null; // String
    givenName: string | null; // String
    id: number; // Int!
    picture: string | null; // String
    sub: string; // String!
    watchlists: NexusGenRootTypes['Watchlist'][]; // [Watchlist!]!
  }
  Watchlist: { // field return type
    hiddenColumns: NexusGenScalars['Json'] | null; // Json
    id: number; // Int!
    name: string; // String!
    shares: Array<NexusGenRootTypes['ShareQuote'] | null> | null; // [ShareQuote]
    user: NexusGenRootTypes['User']; // User!
  }
  WatchlistShares: { // field return type
    price: number; // Float!
  }
}

export interface NexusGenFieldTypeNames {
  IEXSearchResult: { // field return type name
    exchange: 'String'
    region: 'String'
    securityName: 'String'
    symbol: 'String'
  }
  Mutation: { // field return type name
    addShareToWatchlist: 'WatchlistShares'
    createPortfolio: 'Portfolio'
    createWatchlist: 'Watchlist'
    removeShareFromWatchList: 'WatchlistShares'
    updateWatchlistHiddenColumns: 'Watchlist'
  }
  Portfolio: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    name: 'String'
    shares: 'PortfolioShares'
    user: 'User'
  }
  PortfolioShares: { // field return type name
    createdAt: 'DateTime'
  }
  Query: { // field return type name
    portfolio: 'Portfolio'
    portfolios: 'Portfolio'
    symbolSearch: 'IEXSearchResult'
    watchlist: 'Watchlist'
    watchlists: 'Watchlist'
  }
  Share: { // field return type name
    companyName: 'String'
    country: 'String'
    description: 'String'
    exchange: 'String'
    id: 'Int'
    industry: 'String'
    issueType: 'String'
    sector: 'String'
    symbol: 'String'
  }
  ShareQuote: { // field return type name
    addedAt: 'DateTime'
    addedPrice: 'Float'
    change: 'Float'
    changePercent: 'Float'
    changePercentSinceAdded: 'Float'
    changeSinceAdded: 'Float'
    companyName: 'String'
    high: 'Float'
    latestPrice: 'Float'
    latestUpdate: 'Float'
    latestVolume: 'Float'
    low: 'Float'
    open: 'Float'
    shareId: 'Int'
    symbol: 'String'
  }
  User: { // field return type name
    email: 'String'
    familyName: 'String'
    givenName: 'String'
    id: 'Int'
    picture: 'String'
    sub: 'String'
    watchlists: 'Watchlist'
  }
  Watchlist: { // field return type name
    hiddenColumns: 'Json'
    id: 'Int'
    name: 'String'
    shares: 'ShareQuote'
    user: 'User'
  }
  WatchlistShares: { // field return type name
    price: 'Float'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addShareToWatchlist: { // args
      symbol: string; // String!
      watchlistId: string; // ID!
    }
    createPortfolio: { // args
      name: string; // String!
    }
    createWatchlist: { // args
      name: string; // String!
    }
    removeShareFromWatchList: { // args
      shareId: number; // Int!
      watchlistId: number; // Int!
    }
    updateWatchlistHiddenColumns: { // args
      columns: Array<string | null>; // [String]!
      watchlistId: number; // Int!
    }
  }
  Portfolio: {
    shares: { // args
      after?: NexusGenInputs['PortfolioSharesWhereUniqueInput'] | null; // PortfolioSharesWhereUniqueInput
      before?: NexusGenInputs['PortfolioSharesWhereUniqueInput'] | null; // PortfolioSharesWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    portfolio: { // args
      id: number; // Int!
    }
    symbolSearch: { // args
      fragment: string; // String!
    }
    watchlist: { // args
      id: number; // Int!
    }
  }
  User: {
    watchlists: { // args
      after?: NexusGenInputs['WatchlistWhereUniqueInput'] | null; // WatchlistWhereUniqueInput
      before?: NexusGenInputs['WatchlistWhereUniqueInput'] | null; // WatchlistWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}